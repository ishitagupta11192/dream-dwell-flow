AWSTemplateFormatVersion: '2010-09-09'
Description: 'Dream Dwell Flow - Lambda Backend Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'

Resources:
  # DynamoDB Table for Properties
  PropertiesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'DreamDwellFlow-Properties-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: type
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TypeIndex
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: DreamDwellFlow

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'DreamDwellFlow-LambdaRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt PropertiesTable.Arn
                  - !Sub '${PropertiesTable.Arn}/index/*'

  # Lambda Function
  PropertyHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'DreamDwellFlow-PropertyHandler-${Environment}'
      Runtime: nodejs18.x
      Handler: property-handler.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({
                message: 'Lambda function deployed successfully!',
                environment: '${Environment}'
              })
            };
          };
      Environment:
        Variables:
          TABLE_NAME: !Ref PropertiesTable
          ENVIRONMENT: !Ref Environment
      Timeout: 30
      MemorySize: 256
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: DreamDwellFlow

  # API Gateway
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'DreamDwellFlow-API-${Environment}'
      Description: 'API Gateway for Dream Dwell Flow'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource for Properties
  PropertiesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: properties

  # API Gateway Resource for Individual Property
  PropertyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref PropertiesResource
      PathPart: '{id}'

  # Lambda Permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PropertyHandlerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  # API Gateway Methods
  GetPropertiesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref PropertiesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PropertyHandlerFunction.Arn}/invocations'

  PostPropertiesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref PropertiesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PropertyHandlerFunction.Arn}/invocations'

  GetPropertyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref PropertyResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PropertyHandlerFunction.Arn}/invocations'

  PutPropertyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref PropertyResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PropertyHandlerFunction.Arn}/invocations'

  DeletePropertyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref PropertyResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PropertyHandlerFunction.Arn}/invocations'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetPropertiesMethod
      - PostPropertiesMethod
      - GetPropertyMethod
      - PutPropertyMethod
      - DeletePropertyMethod
    Properties:
      RestApiId: !Ref RestApi
      StageName: !Ref Environment

Outputs:
  ApiUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  PropertiesTableName:
    Description: 'DynamoDB Table Name'
    Value: !Ref PropertiesTable
    Export:
      Name: !Sub '${AWS::StackName}-PropertiesTable'

  LambdaFunctionArn:
    Description: 'Lambda Function ARN'
    Value: !GetAtt PropertyHandlerFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaArn'

  Environment:
    Description: 'Environment'
    Value: !Ref Environment
    Export:
      Name: !Sub '${AWS::StackName}-Environment'
